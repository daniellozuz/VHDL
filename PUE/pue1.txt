library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity main is
    Port ( CLK_50MHz : in STD_LOGIC;
           Switch    : in STD_LOGIC_VECTOR ( 3 downto 0 );
           LED       : out STD_LOGIC_VECTOR ( 7 downto 0 );
           Enc1_A    : in STD_LOGIC;
           Enc1_B    : in STD_LOGIC;
           Enc2_A    : in STD_LOGIC;
           Enc2_B    : in STD_LOGIC;
           BTN_NORTH : inout STD_LOGIC; -- increase PWM duty cycle
           BTN_SOUTH : inout STD_LOGIC; -- decrease PWM duty cycle
           BTN_EAST  : inout STD_LOGIC; -- increase PWM frequency
           BTN_WEST  : inout STD_LOGIC; -- decrease PWM frequency
           Dir       : out STD_LOGIC;
           Break     : out STD_LOGIC;
           PWM       : out STD_LOGIC );
end main;


architecture Behavioral of main is
    shared variable resolution : INTEGER := 10_000;
    shared variable duty_cycle : INTEGER := 0;
begin


button_proc: process ( CLK_50MHz )
    variable button_counter   : INTEGER := 0;
    constant button_prescaler : INTEGER := 1_000_000; -- TODO change it to sth reasonable
begin
    if ( CLK_50MHz = '1' and CLK_50MHz'event ) then
        button_counter := button_counter + 1;
        if button_counter = button_prescaler then
            button_counter := 0;
            if BTN_WEST = '1' and resolution > 2_500 then
                resolution := resolution - 10;
            end if;
            if BTN_EAST = '1' and resolution < 10_000 then
                resolution := resolution + 10;
            end if;
            if BTN_NORTH = '1' and duty_cycle < 128 then
                duty_cycle := duty_cycle + 1;
            end if;
            if BTN_SOUTH = '1' and duty_cycle > 0 then
                duty_cycle := duty_cycle - 1;
            end if;
        end if;
    end if;
end process button_proc;


dir_break_proc: process ( CLK_50MHz )
begin
    if ( CLK_50MHz = '1' and CLK_50MHz'event ) then
        Dir <= Switch(0);
        Break <= Switch(1);
    end if;
end process dir_break_proc;


PWM_proc: process ( CLK_50MHz )
    variable counter_PWM : INTEGER := 0;
begin
    if ( CLK_50MHz = '1' and CLK_50MHz'event ) then
        counter_PWM := counter_PWM + 1;
        if counter_PWM > duty_cycle * resolution / 128 then
            PWM <= '0';
        end if;
        if counter_PWM = resolution then
            counter_PWM := 0;
            PWM <= '1';
        end if;
    end if;
end process PWM_proc;


end Behavioral;
